# Copyright (c) 2018-2019, The Linux Foundation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#     * Neither the name of The Linux Foundation nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
type port-bridge, domain;
type port-bridge_exec, exec_type, vendor_file_type, file_type;

init_daemon_domain(port-bridge)

userdebug_or_eng(`
  domain_auto_trans(shell, port-bridge_exec, netmgrd)
  #domain_auto_trans(adbd, port-bridge_exec, netmgrd)
  #diag_use(port-bridge)
  permissive port-bridge;
')

# Allow operations on different types of sockets
allow port-bridge port-bridge:netlink_kobject_uevent_socket { create bind read };
allow port-bridge mnt_vendor_file:dir {search write add_name };
allow port-bridge mnt_vendor_file:file { write create open getattr setattr};

allow port-bridge {
    # Allow operations on mhi transport
    mhi_device
    # Allow operations on ATCoP g-link transport
    at_device
}:chr_file rw_file_perms;

#access ipa sysfs node
allow port-bridge sysfs_data:file r_file_perms;

allow port-bridge port_bridge_data_file:file create_file_perms;
allow port-bridge port_bridge_data_file:dir w_dir_perms;
allow port-bridge port-bridge_socket:dir w_dir_perms;
allow port-bridge modem_efs_partition_device:blk_file { read write open  };
allow port-bridge block_device:dir { search };
allow port-bridge port-bridge_socket:sock_file create_file_perms;

#============= port-bridge-quec==============
#allow port-bridge quec_prop:file { read open getattr };
#allow port-bridge proc:file { read getattr open };
#allow port-bridge proc_meminfo:file { read getattr open };
#allow port-bridge block_device:dir search;
#allow port-bridge property_socket:sock_file write;
#allow port-bridge vendor_shell_exec:file execute_no_trans;
#allow port-bridge sysfs_battery_supply:dir { search };
#allow port-bridge sysfs_battery_supply:file { write open getattr };
#allow vendor_init system_data_file:dir { read open getattr search write add_name create setattr };
#allow vendor_init tombstone_data_file:dir { read open getattr search write add_name create setattr };
#allow port-bridge init:unix_stream_socket connectto;
#allow port-bridge port_bridge_data_file:fifo_file { create open };
#allow port-bridge sysfs_socinfo:file write;
#allow port-bridge vendor_toolbox_exec:file execute_no_trans;
#allow port-bridge port_bridge_data_file:fifo_file { read write setattr };

allow init proc:file setattr;
allow init vendor_file:file execute;
allow init nativetest_data_file:file getattr;

userdebug_or_eng(`
    permissive qti_init_shell;
')

userdebug_or_eng(`
    permissive vendor_init;
')
